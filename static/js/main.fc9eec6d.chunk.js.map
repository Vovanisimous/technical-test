{"version":3,"sources":["components/EmployeeDialog/EmployeeDialog.tsx","components/EmployeeDialog/formFields.tsx","components/SetEmployee.tsx","components/DeleteEmployee.tsx","components/EmpoyeeTable.tsx","components/AddEmployee.tsx","hooks/EmployeeHook.ts","hooks/localHook.ts","App.tsx","index.tsx"],"names":["validate","values","errors","firstname","lastname","patronymic","position","birthdate","gender","employmentDate","dateOfDismissal","EmployeeDialog","props","employees","dialogOpen","handleDialog","onSubmit","employee","paramEmployess","index","findIndex","item","id","splice","Dialog","disableBackdropClick","disableEscapeKeyDown","open","onClose","DialogTitle","DialogContent","params","initialValues","Date","toString","drivingLicense","colleges","render","handleSubmit","submitting","form","pristine","noValidate","Paper","style","padding","Grid","container","alignItems","spacing","size","field","label","name","margin","required","dateFunsUtils","DateFnsUtils","format","formControlProps","radioGroupProps","row","data","value","multiple","display","MenuProps","PaperProps","maxHeight","width","variant","getContentAnchorEl","map","college","MenuItem","idx","xs","marginTop","Button","color","type","disabled","onClick","SetEmployee","useState","setDialopOpen","state","employeeHook","setEmployee","DeleteEmployee","deleteEmployee","useStyles","makeStyles","theme","mainContainer","flexDirection","justifyContent","card","managersCard","cursor","managersListItem","listStyleType","background","palette","primary","light","button","collegesList","maxWidth","overflow","collegesListItem","EmployeeTable","classes","className","TableContainer","component","Table","TableHead","TableRow","TableCell","TableBody","scope","List","ListItem","textField","marginLeft","marginRight","AddEmployee","createEmployee","useEmployee","defaultValue","key","stickyValue","window","localStorage","getItem","JSON","parse","setValue","React","useEffect","setItem","stringify","useStickyState","setEmployees","findColleges","collegeIds","filter","includes","employeeIndex","console","log","newEmployees","newEmployee","Number","toLocaleDateString","uuidv4","setEmployeeParams","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc9eec6d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Dialog, DialogTitle, DialogContent, Grid, GridSize, Paper} from \"@material-ui/core\";\r\nimport { Form } from 'react-final-form'\r\nimport {ICreateEmployeeParams} from \"../../interface/Employee\";\r\nimport {formFields} from \"./formFields\"\r\nimport {IEmployee} from \"../../interface/Employee\"\r\nimport { useEffect } from \"react\";\r\n\r\nconst validate = (values: ICreateEmployeeParams) => {\r\n    const errors: any = {}\r\n    if (!values.firstname) {\r\n        errors.firstname = 'Обязательное поле';\r\n    }\r\n    if (!values.lastname) {\r\n        errors.lastname = 'Обязательное поле';\r\n    }\r\n    if (!values.patronymic) {\r\n        errors.patronymic = 'Обязательное поле';\r\n    }\r\n    if (!values.position) {\r\n        errors.position = 'Обязательное поле';\r\n    }\r\n    if (!values.birthdate) {\r\n        errors.birthdate = 'Обязательное поле';\r\n    }\r\n    if (!values.gender) {\r\n        errors.gender = 'Обязательное поле';\r\n    }\r\n    if (!values.employmentDate) {\r\n        errors.employmentDate = 'Обязательное поле';\r\n    }\r\n    if (values.dateOfDismissal < values.employmentDate) {\r\n        errors.dateOfDismissal = 'Дата увольнения не может быть меньше даты приема на работу'\r\n    }\r\n    return errors;\r\n};\r\n\r\nexport const EmployeeDialog = (\r\n    props: {\r\n        employees: IEmployee[], \r\n        dialogOpen: boolean, \r\n        handleDialog: (state: \"open\" | \"close\") => void, \r\n        onSubmit: (params: ICreateEmployeeParams) => void,\r\n        employee?: IEmployee\r\n    }) => {\r\n\r\n    const {employees, dialogOpen, handleDialog, onSubmit, employee} = props;\r\n    \r\n    const paramEmployess = [...employees]\r\n    if (employee) {\r\n        const index = paramEmployess.findIndex(item => item.id === employee.id)\r\n        paramEmployess.splice(index, 1)\r\n    }\r\n\r\n    return (\r\n        <Dialog disableBackdropClick disableEscapeKeyDown open={dialogOpen} onClose={() => handleDialog(\"close\")}>\r\n                <DialogTitle>Заполните форму</DialogTitle>\r\n                <DialogContent>\r\n                    <Form\r\n                        onSubmit={(params) => {onSubmit(params)}}\r\n                        initialValues={{\r\n                            lastname: employee ? employee?.lastname : '',\r\n                            firstname: employee ? employee?.firstname : '',\r\n                            patronymic: employee ? employee?.patronymic : '',\r\n                            position: employee ? employee?.position : '',\r\n                            birthdate: employee ? employee?.birthdate : new Date(),\r\n                            gender: employee ? employee?.gender.toString() : '',\r\n                            employmentDate: employee ? employee?.employmentDate : new Date(),\r\n                            dateOfDismissal: employee ? employee?.dateOfDismissal : new Date(),\r\n                            drivingLicense: employee ? employee?.drivingLicense : false,\r\n                            colleges: employee ? employee?.colleges : []\r\n                        }}\r\n                        validate={validate}\r\n                        render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n                            <form onSubmit={handleSubmit} noValidate>\r\n                                <Paper style={{ padding: 16 }}>\r\n                                    <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                                        {formFields(paramEmployess).map((item, idx) => (\r\n                                            <Grid item xs={item.size as GridSize} key={idx}>\r\n                                                {item.field}\r\n                                            </Grid>\r\n                                        ))}\r\n                                        <Grid item style={{ marginTop: 16 }}>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                type=\"submit\"\r\n                                                disabled={submitting}\r\n                                            >\r\n                                                Отправить\r\n                                            </Button>\r\n                                        </Grid>\r\n                                        <Grid item style={{ marginTop: 16 }}>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => handleDialog(\"close\")}\r\n                                            >\r\n                                                Закрыть\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Paper>\r\n                            </form>\r\n                        )}\r\n                    />\r\n                </DialogContent>\r\n            </Dialog>\r\n    )\r\n}","import {\r\n    TextField,\r\n    Checkboxes,\r\n    Radios,\r\n    Select,\r\n    DatePicker,\r\n} from 'mui-rff';\r\nimport {IEmployee} from \"../../interface/Employee\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {MenuItem} from \"@material-ui/core\";\r\n\r\nexport const formFields = (colleges: IEmployee[]) => [\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <TextField\r\n                label=\"Фамилия\"\r\n                name=\"lastname\"\r\n                margin=\"none\"\r\n                required={true}\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <TextField\r\n                label=\"Имя\"\r\n                name=\"firstname\"\r\n                margin=\"none\"\r\n                required={true}\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <TextField\r\n                label=\"Отчество\"\r\n                name=\"patronymic\"\r\n                margin=\"none\"\r\n                required={true}\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <TextField\r\n                label=\"Должность\"\r\n                name=\"position\"\r\n                margin=\"none\"\r\n                required={true}\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <DatePicker\r\n                name=\"birthdate\"\r\n                margin=\"normal\"\r\n                label=\"День рождения\"\r\n                dateFunsUtils={DateFnsUtils}\r\n                format=\"dd-MM-yyyy\"\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <Radios\r\n                label=\"Пол\"\r\n                name=\"gender\"\r\n                formControlProps={{ margin: 'none' }}\r\n                radioGroupProps={{ row: true }}\r\n                data={[\r\n                    { label: 'Мужской', value: \"0\"},\r\n                    { label: 'Женский', value: \"1\"},\r\n                ]}\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <DatePicker\r\n                name=\"employmentDate\"\r\n                margin=\"normal\"\r\n                label=\"Дата приема на работу\"\r\n                dateFunsUtils={DateFnsUtils}\r\n                format=\"dd-MM-yyyy\"\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 6,\r\n        field: (\r\n            <DatePicker\r\n                name=\"dateOfDismissal\"\r\n                margin=\"normal\"\r\n                label=\"Дата увольнения\"\r\n                dateFunsUtils={DateFnsUtils}\r\n                format=\"dd-MM-yyyy\"\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 12,\r\n        field: (\r\n            <Checkboxes\r\n                name=\"drivingLicense\"\r\n                formControlProps={{ margin: 'none' }}\r\n                data={{ label: 'Водительские права', value: true }}\r\n            />\r\n        ),\r\n    },\r\n    {\r\n        size: 12,\r\n        field: (\r\n            <Select\r\n                name=\"colleges\"\r\n                label=\"Коллеги\"\r\n                formControlProps={{ margin: 'none' }}\r\n                multiple\r\n                style={{display: \"absolute\"}}\r\n                MenuProps={\r\n                    {\r\n                        PaperProps: {\r\n                          style: {\r\n                            maxHeight: 48 * 4.5 + 8,\r\n                            width: 250\r\n                          }\r\n                        },\r\n                        variant: \"menu\",\r\n                        getContentAnchorEl: null\r\n                      }\r\n                }\r\n            >\r\n                {\r\n                    colleges.map((college) => (\r\n                        <MenuItem key={college.id} value={college.id}>\r\n                            {college.firstname + \" \" + college.lastname}\r\n                        </MenuItem>\r\n                    ))\r\n                }\r\n            </Select>\r\n        ),\r\n    },\r\n];","import React, {useState} from \"react\";\r\nimport {Button, makeStyles} from \"@material-ui/core\";\r\nimport {IUseEmployee} from \"../hooks/EmployeeHook\";\r\nimport {ICreateEmployeeParams} from \"../interface/Employee\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport { EmployeeDialog } from \"./EmployeeDialog/EmployeeDialog\";\r\n\r\nexport const SetEmployee = (props: {employeeHook: IUseEmployee, index: number}) => {\r\n    const [dialogOpen, setDialopOpen] = useState(false);\r\n\r\n    const handleDialog = (state: \"open\" | \"close\") => {\r\n        switch (state){\r\n            case \"open\":\r\n                setDialopOpen(true);\r\n                break;\r\n            case \"close\":\r\n                setDialopOpen(false);\r\n                break;\r\n        }      \r\n    }\r\n\r\n    const onSubmit = (params: ICreateEmployeeParams) => {\r\n        props.employeeHook.setEmployee(props.index, params)\r\n        handleDialog(\"close\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => handleDialog(\"open\")}\r\n            >\r\n                <CreateIcon />\r\n            </Button>\r\n            <EmployeeDialog \r\n                employees={props.employeeHook.employees} \r\n                dialogOpen={dialogOpen} \r\n                handleDialog={handleDialog} \r\n                onSubmit={onSubmit}\r\n                employee={props.employeeHook.employees[props.index]}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {IUseEmployee} from \"../hooks/EmployeeHook\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport const DeleteEmployee = (props: {employeeHook: IUseEmployee, index: number}) => {\r\n    const onDeleteEmployee = () => {\r\n        props.employeeHook.deleteEmployee(props.index)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={onDeleteEmployee}\r\n            >\r\n                <DeleteIcon />\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, List, ListItem} from \"@material-ui/core\";\r\nimport {IUseEmployee} from \"../hooks/EmployeeHook\";\r\nimport { useEffect } from \"react\";\r\nimport {SetEmployee} from \"./SetEmployee\"\r\nimport { DeleteEmployee } from \"./DeleteEmployee\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainContainer: {\r\n        marginTop: 64,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    card: {\r\n        width: 345,\r\n        padding: 30,\r\n        margin: 10,\r\n    },\r\n    managersCard: {\r\n        width: 345,\r\n        padding: 30,\r\n        margin: 10,\r\n        \"&:hover\": {\r\n            cursor: \"pointer\",\r\n        },\r\n    },\r\n    managersListItem: {\r\n        listStyleType: \"none\",\r\n        \"&:hover\": {\r\n            background: theme.palette.primary.light,\r\n        },\r\n    },\r\n    button: {\r\n        margin: 10,\r\n    },\r\n    collegesList: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        position: 'relative',\r\n        overflow: 'auto',\r\n        maxHeight: 50,\r\n    },\r\n    collegesListItem: {\r\n        padding: 0\r\n    }\r\n}));\r\n\r\n\r\nexport const EmployeeTable = (props: {employeeHook: IUseEmployee}) => {\r\n    const classes = useStyles();\r\n    const {employees, deleteEmployee, setEmployee} = props.employeeHook;\r\n\r\n    return (\r\n        <div className={classes.mainContainer}>\r\n            <TableContainer component={Paper} >\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Фамилия</TableCell>\r\n                            <TableCell>Имя</TableCell>\r\n                            <TableCell>Отчество</TableCell>\r\n                            <TableCell>Должность</TableCell>\r\n                            <TableCell>Дата рождения</TableCell>\r\n                            <TableCell>Пол</TableCell>\r\n                            <TableCell>Дата приема на работу</TableCell>\r\n                            <TableCell>Дата увольнения</TableCell>\r\n                            <TableCell>Наличие прав</TableCell>\r\n                            <TableCell>Коллеги</TableCell>\r\n                            <TableCell>Управление</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {employees.map((employee, index) => (\r\n                            <TableRow key={employee.id}>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.lastname}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.firstname}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.patronymic}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.position}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.birthdate}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.gender ? \"Женский\" : \"Мужской\"}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.employmentDate}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.dateOfDismissal}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    {employee.drivingLicense ? \"Да\" : \"Нет\"}\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    <List className={classes.collegesList}>\r\n                                        {employee.colleges && employee.colleges.map((item) => (\r\n                                            <ListItem className={classes.collegesListItem}>{item.lastname}</ListItem>\r\n                                        ))}\r\n                                    </List>\r\n                                </TableCell>\r\n                                <TableCell component={'th'} scope={'row'}>\r\n                                    <SetEmployee employeeHook={props.employeeHook} index={index}/>\r\n                                    <DeleteEmployee employeeHook={props.employeeHook} index={index}/>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n\r\n}","import React, {useState} from \"react\";\r\nimport {IUseEmployee} from \"../hooks/EmployeeHook\";\r\nimport {Button, makeStyles} from \"@material-ui/core\";\r\nimport {ICreateEmployeeParams} from \"../interface/Employee\";\r\nimport { EmployeeDialog } from \"./EmployeeDialog/EmployeeDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        width: 700,\r\n        padding: 30,\r\n        margin: 10,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    }\r\n}))\r\n\r\nexport const AddEmployee = (props: {employeeHook: IUseEmployee}) => {\r\n    const classes = useStyles();\r\n    const [dialogOpen, setDialopOpen] = useState(false);\r\n\r\n    const handleDialog = (state: \"open\" | \"close\") => {\r\n        switch (state){\r\n            case \"open\":\r\n                setDialopOpen(true);\r\n                break;\r\n            case \"close\":\r\n                setDialopOpen(false);\r\n                break;\r\n        }      \r\n    }\r\n\r\n    const onSubmit = (params: ICreateEmployeeParams) => {\r\n        props.employeeHook.createEmployee(params)\r\n        handleDialog(\"close\")\r\n    }\r\n\r\n    return (\r\n        <div className={classes.card}>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handleDialog(\"open\")}\r\n            >\r\n                Добавить сотрудника\r\n            </Button>\r\n            <EmployeeDialog \r\n                employees={props.employeeHook.employees} \r\n                dialogOpen={dialogOpen} \r\n                handleDialog={handleDialog} \r\n                onSubmit={onSubmit}\r\n            />\r\n        </div>\r\n    )\r\n}","import {useStickyState} from \"./localHook\";\r\nimport {IEmployee} from \"../interface/Employee\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ICreateEmployeeParams } from \"../interface/Employee\";\r\n\r\nexport interface IUseEmployee {\r\n    employees: IEmployee[];\r\n    setEmployee: (employeeIndex: number, params: ICreateEmployeeParams) => void;\r\n    deleteEmployee: (employeeIndex: number) => void;\r\n    createEmployee: (params: ICreateEmployeeParams) => IEmployee[]\r\n}\r\n\r\nexport const useEmployee = (): IUseEmployee => {\r\n    const [employees, setEmployees] = useStickyState<IEmployee[]>([], 'employees');\r\n\r\n    const findColleges = (collegeIds: string[] | undefined): IEmployee[] => {\r\n        if (!collegeIds) return [];\r\n\r\n        const checkEmployess = [...employees]\r\n\r\n        return checkEmployess.filter((item) => {\r\n            if (collegeIds.includes(item.id)) {\r\n                return true\r\n            }\r\n            return false\r\n        })\r\n    }\r\n\r\n    const setEmployee = (employeeIndex: number, params: ICreateEmployeeParams) => {\r\n        console.log(params)\r\n        const newEmployees = [...employees]\r\n\r\n        const newEmployee: IEmployee = {\r\n            ...employees[employeeIndex],\r\n            ...params,\r\n            gender: Number(params.gender),\r\n            birthdate: typeof params.birthdate === \"object\" ? params.birthdate.toLocaleDateString() : params.birthdate,\r\n            dateOfDismissal: typeof params.dateOfDismissal === \"object\" ? params.dateOfDismissal.toLocaleDateString():  params.dateOfDismissal,\r\n            employmentDate: typeof params.employmentDate === \"object\" ? params.employmentDate.toLocaleDateString(): params.employmentDate,\r\n            colleges: findColleges(params.colleges)\r\n        };\r\n\r\n        newEmployees[employeeIndex] = newEmployee\r\n\r\n        setEmployees(newEmployees)\r\n    }\r\n\r\n    const deleteEmployee = (employeeIndex: number) => {\r\n        const newEmployees = [...employees]\r\n\r\n        newEmployees.splice(employeeIndex, 1);\r\n\r\n        setEmployees(newEmployees)\r\n    }\r\n\r\n    const createEmployee = (params: ICreateEmployeeParams) => {\r\n        const id = uuidv4();\r\n\r\n        const setEmployeeParams = {\r\n            ...params,\r\n            id: id,\r\n            gender: Number(params.gender),\r\n            birthdate: params.birthdate.toLocaleDateString(),\r\n            dateOfDismissal: params.dateOfDismissal.toLocaleDateString(),\r\n            employmentDate: params.employmentDate.toLocaleDateString(),\r\n            colleges: findColleges(params.colleges)\r\n        }\r\n        \r\n        setEmployees([...employees, setEmployeeParams])\r\n        return employees\r\n    }\r\n\r\n    return {employees, setEmployee, deleteEmployee, createEmployee}\r\n}","import React, {useState} from 'react'\r\n\r\ntype IUseStickyState<T> = [T, React.Dispatch<React.SetStateAction<T>>];\r\n\r\nexport const useStickyState = <T>(defaultValue: T, key: string): IUseStickyState<T>=> {\r\n    const [value, setValue] = useState<T>(() => {\r\n        const stickyValue = window.localStorage.getItem(key);\r\n        return stickyValue !== null\r\n            ? JSON.parse(stickyValue)\r\n            : defaultValue;\r\n    });\r\n    React.useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n    }, [key, value]);\r\n\r\n    return [value, setValue]\r\n}","import React from 'react';\nimport {EmployeeTable} from \"./components/EmpoyeeTable\";\nimport {makeStyles} from \"@material-ui/core\";\nimport {AddEmployee} from \"./components/AddEmployee\";\nimport { useEmployee } from './hooks/EmployeeHook';\n\nconst useStyles = makeStyles((theme) => ({\n  mainContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const employeeHook = useEmployee();\n\n  return (\n    <div className={classes.mainContainer}>\n        <AddEmployee employeeHook = {employeeHook}/>\n        <EmployeeTable employeeHook = {employeeHook}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}